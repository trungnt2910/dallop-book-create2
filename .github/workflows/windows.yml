name: Windows Server
on:
  workflow_dispatch:
    inputs:
      winver:
        description: The version of Windows Server to run
        required: true
        default: 'latest'
        type: choice
        options:
          - '2019'
          - '2022'
          - 'latest'
defaults:
  run:
    shell: cmd

jobs:
  build:
    runs-on: windows-${{ inputs.winver }}
    steps:
    - uses: actions/checkout@v2

    - name: Generate random password
      run: |
        $randomBytesArray = New-Object byte[] 64
        $rngObject = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
        $rngObject.GetBytes($randomBytesArray)
        $hostname = (hostname | Out-String).Trim()
        $randomString = [System.Convert]::ToBase64String($randomBytesArray)
        Invoke-WebRequest `
            -Uri ${{ secrets.DISCORD_WEBHOOK }} `
            -Method POST `
            -ContentType "application/json" `
            -Body (@{"content"="The password for`n```````n$hostname`n``````is:`n||```````n$randomString`n``````||"; "username"="${{ github.event.repository.name }}"}|ConvertTo-Json)
        $randomString | Out-File -Encoding ASCII -NoNewline password.txt
      shell: powershell

    - name: Install and setup Tailscale
      run: |
        choco install tailscale
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

        tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --accept-risk all --advertise-exit-node --unattended

        $randomBytesArray = New-Object byte[] 64
        $rngObject = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
        $rngObject.GetBytes($randomBytesArray)
        $hostname = (hostname | Out-String).Trim()
        $randomString = [System.Convert]::ToBase64String($randomBytesArray)

        $hostname = (hostname | Out-String).ToLowerInvariant().Trim()
        $domain = "${{ secrets.TAILSCALE_NETWORK }}"

        tailscale cert --cert-file cert.crt --key-file cert.key "$hostname.$domain"
        openssl pkcs12 -export -in cert.crt -inkey cert.key -out cert.pfx -passout pass:$randomString
        certutil -p "$randomString" -ImportPFX cert.pfx

        $thumbprint = [System.Security.Cryptography.X509Certificates.X509Certificate2]::new([System.IO.File]::ReadAllBytes("cert.crt")).Thumbprint
        wmic /namespace:\\root\CIMV2\TerminalServices PATH Win32_TSGeneralSetting Set SSLCertificateSHA1Hash="$thumbprint"

        rm cert.crt
        rm cert.key
        rm cert.pfx
      shell: pwsh

    - name: Enable RDP
      run: |
        reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f
        powershell -Command "Enable-NetFirewallRule -DisplayGroup 'Remote Desktop'"
        reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v UserAuthentication /t REG_DWORD /d 1 /f
      shell: cmd

    - name: Enable services for RDP
      run: |
        net config server /srvcomment:"Windows Server"
        reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /V EnableAutoTray /T REG_DWORD /D 0 /F
        set /p USER_PASSWORD=<password.txt
        del /S /Q /F password.txt
        net user ${{ secrets.USER_NAME }} "%USER_PASSWORD%" /add /y
        net localgroup administrators ${{ secrets.USER_NAME }} /add
        net user administrator /active:yes
        net user installer /delete
        diskperf -Y
        sc config Audiosrv start= auto
        sc start audiosrv
        icacls C:\Windows\Temp /grant ${{ secrets.USER_NAME }}:F
        icacls C:\Windows\installer /grant ${{ secrets.USER_NAME }}:F
      shell: cmd

    - name: Enable SSH
      run: |
        powershell -Command "Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0"
        powershell -Command "Start-Service sshd"
        powershell -Command "Set-Service -Name sshd -StartupType 'Automatic'"
        curl ${{ github.server_url }}/${{ github.repository_owner }}.keys >> "%ProgramData%\ssh\administrators_authorized_keys"
        icacls "%ProgramData%\ssh\administrators_authorized_keys" /inheritance:r /grant "Administrators:F" /grant "SYSTEM:F"
      shell: cmd

    - name: Device has joined Tailscale network as...
      run: hostname

    - name: Send notification
      run: |
        $hostname = (hostname | Out-String).Trim()

        ssh-keyscan localhost > keys.txt 2> $null
        $fingerprints = ssh-keygen -l -E sha256 -f keys.txt
        rm keys.txt

        Invoke-WebRequest `
            -Uri ${{ secrets.DISCORD_WEBHOOK }} `
            -Method POST `
            -ContentType "application/json" `
            -Body (@{"content"="Your Virtual Machine`n```````n$hostname`n``````is ready!`nThe SSH public keys are:`n```````n$fingerprints``````"; "username"="${{ github.event.repository.name }}"}|ConvertTo-Json)
      shell: powershell

    - name: Ping loop
      run: |
        while (1)
        {
            $hostName = (hostname | Out-String).Trim()
            echo "Device has joined Tailscale network as <$hostName>."
            ping ${{ secrets.TAILSCALE_HOMESERVER }} -n 1
            sleep 60
        }
      shell: powershell
