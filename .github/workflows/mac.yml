name: macOS
on:
  workflow_dispatch:
    inputs:
        macver:
          description: The version of macOS to run
          required: true
          default: 'latest'
          type: choice
          options:
            - '10.15'
            - '11'
            - '12'
            - '13'
            - '14'
            - 'latest'
        tag:
          description: The unique tag of the machine
          required: false
          type: string
        purpose:
          description: The purpose of the machine
          required: false
          type: string
defaults:
  run:
    shell: bash

concurrency:
  group: mac-${{ inputs.tag }}-${{ inputs.purpose }}

jobs:
    build:
        runs-on: macos-${{ inputs.macver }}
        steps:
        - uses: actions/checkout@v4

        - name: Generate random password
          run: |
            $randomBytesArray = New-Object byte[] 64
            $rngObject = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
            $rngObject.GetBytes($randomBytesArray)

            $hostname = "gh-mac"
            if ("${{ inputs.tag }}" -ne "") { $hostname += "-${{ inputs.tag }}" }
            if ("${{ inputs.purpose }}" -ne "") { $hostname += "-${{ inputs.purpose }}" }

            $randomString = [System.Convert]::ToBase64String($randomBytesArray)
            Invoke-WebRequest `
                -Uri ${{ secrets.DISCORD_WEBHOOK }} `
                -Method POST `
                -ContentType "application/json" `
                -Body (@{"content"="The password for`n```````n$hostname`n``````is:`n||```````n$randomString`n``````||"; "username"="${{ github.event.repository.name }}"}|ConvertTo-Json)
            $randomString | Out-File -Encoding ASCII password.txt
          shell: pwsh

        - name: Optimizations
          run: |
            # Disable spotlight indexing
            sudo mdutil -i off -a

            #Enable Performance mode
            sudo nvram boot-args="serverperfmode=1 $(nvram boot-args 2>/dev/null | cut -f 2-)"

            #Reduce Motion and Transparency
            defaults write com.apple.Accessibility DifferentiateWithoutColor -int 1
            defaults write com.apple.Accessibility ReduceMotionEnabled -int 1
            defaults write com.apple.universalaccess reduceMotion -int 1
            defaults write com.apple.universalaccess reduceTransparency -int 1
            defaults write com.apple.Accessibility ReduceMotionEnabled -int 1

            #Enable Multi-Session
            sudo /usr/bin/defaults write .GlobalPreferences MultipleSessionsEnabled -bool TRUE

            defaults write "Apple Global Domain" MultipleSessionsEnabled -bool true

            #Disable Screen-Lock
            defaults write com.apple.loginwindow DisableScreenLock -bool true

            defaults write com.apple.loginwindow AllowList -string '*'

        - name: Create new account
          run: |
            sudo dscl . -create /Users/${{ secrets.USER_NAME }}
            sudo dscl . -create /Users/${{ secrets.USER_NAME }} UserShell /bin/bash
            sudo dscl . -create /Users/${{ secrets.USER_NAME }} RealName "${{ github.repository_owner }}"
            sudo dscl . -create /Users/${{ secrets.USER_NAME }} UniqueID 1001
            sudo dscl . -create /Users/${{ secrets.USER_NAME }} PrimaryGroupID 80
            sudo dscl . -create /Users/${{ secrets.USER_NAME }} NFSHomeDirectory /Users/${{ secrets.USER_NAME }}
            sudo dscl . -passwd /Users/${{ secrets.USER_NAME }} "$(cat password.txt)"
            sudo dscl . -passwd /Users/${{ secrets.USER_NAME }} "$(cat password.txt)"
            sudo createhomedir -c -u ${{ secrets.USER_NAME }} > /dev/null

        - name: Enable VNC
          run: |
            sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -configure -allowAccessFor -allUsers -privs -all
            sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -configure -clientopts -setvnclegacy -vnclegacy yes

        - name: Set VNC password
          run: |
            # http://hints.macworld.com/article.php?story=20071103011608872
            echo "$(cat password.txt)" | perl -we 'BEGIN { @k = unpack "C*", pack "H*", "1734516E8BA8C5E2FF1C39567390ADCA"}; $_ = <>; chomp; s/^(.{8}).*/$1/; @p = unpack "C*", $_; foreach (@k) { printf "%02X", $_ ^ (shift @p || 0) }; print "\n"' | sudo tee /Library/Preferences/com.apple.VNCSettings.txt
            rm -rf password.txt

        - name: Start VNC
          run: |
            sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -restart -agent -console
            sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate

        - name: Enable Screen Sharing and Remote Management
          run: |
            os_ver_major="$(sw_vers -productVersion | awk -F'.' '{print $1}')"
            if [[ "${os_ver_major}" -lt 12 ]]; then
              # Workaround not needed for earlier versions of macOS
              exit 0
            fi

            sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist || true

            epoch="$(date +%s)"
            sudo sqlite3 "/Library/Application Support/com.apple.TCC/TCC.db" \
              " BEGIN TRANSACTION; \
                DELETE FROM access WHERE client = 'com.apple.screensharing.agent'; \
                COMMIT; \
                BEGIN TRANSACTION; \
                INSERT INTO access(service,client,client_type,auth_value,auth_reason,auth_version,indirect_object_identifier_type,flags,last_modified,last_reminded) \
                  VALUES('kTCCServicePostEvent','com.apple.screensharing.agent',0,2,4,1,0,0,${epoch},${epoch}); \
                INSERT INTO access(service,client,client_type,auth_value,auth_reason,auth_version,indirect_object_identifier_type,flags,last_modified,last_reminded) \
                  VALUES('kTCCServiceScreenCapture','com.apple.screensharing.agent',0,2,4,1,0,0,${epoch},${epoch}); \
                COMMIT;"

        - name: Install Tailscale
          run: |
            brew install go || true
            brew link --overwrite go || true
            bash -c "go install tailscale.com/cmd/tailscale{,d}@main"

            $hostname = "gh-mac"
            if ("${{ inputs.tag }}" -ne "") { $hostname += "-${{ inputs.tag }}" }
            if ("${{ inputs.purpose }}" -ne "") { $hostname += "-${{ inputs.purpose }}" }

            bash -c "sudo `$HOME/go/bin/tailscaled &"
            bash -c "`$HOME/go/bin/tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname $hostname --accept-risk all --ssh --advertise-exit-node"
          shell: pwsh

        - name: Install scripts
          run: |
            $userDir = "/Users/${{ secrets.USER_NAME }}"
            $shutdown = "
              touch /Users/${{ secrets.USER_NAME }}/shutdown.txt
            "

            $abort = "
              rm -rf /Users/${{ secrets.USER_NAME }}/shutdown.txt
            "

            [System.IO.File]::WriteAllText("shutdown.sh", $shutdown)
            [System.IO.File]::WriteAllText("shutdown_abort.sh", $abort)

            sudo mv "shutdown.sh" "$userDir/shutdown.sh"
            sudo chmod +x "$userDir/shutdown.sh"
            sudo chown ${{ secrets.USER_NAME }} "$userDir/shutdown.sh"
            sudo mv "shutdown_abort.sh" "$userDir/shutdown_abort.sh"
            sudo chmod +x "$userDir/shutdown_abort.sh"
            sudo chown ${{ secrets.USER_NAME }} "$userDir/shutdown_abort.sh"
          shell: pwsh

        - name: Run initialization
          if: ${{ inputs.purpose }}
          run:
            Invoke-Expression (Invoke-WebRequest "${{ secrets.CDN_BASE }}/mac/${{ inputs.purpose }}/init").Content
          shell: pwsh

        - name: Device has joined Tailscale network as...
          run: |
            $hostname = "gh-mac"
            if ("${{ inputs.tag }}" -ne "") { $hostname += "-${{ inputs.tag }}" }
            if ("${{ inputs.purpose }}" -ne "") { $hostname += "-${{ inputs.purpose }}" }
          shell: pwsh

        - name: Send notification
          run: |
            $hostname = "gh-mac"
            if ("${{ inputs.tag }}" -ne "") { $hostname += "-${{ inputs.tag }}" }
            if ("${{ inputs.purpose }}" -ne "") { $hostname += "-${{ inputs.purpose }}" }

            (ssh-keyscan localhost 2> $null) | Out-File -Encoding ASCII keys.txt
            $fingerprints = ssh-keygen -l -E sha256 -f keys.txt | Out-String
            $fingerprints = $fingerprints.Replace(" localhost ", " $hostname ")
            rm keys.txt

            Invoke-WebRequest `
                -Uri ${{ secrets.DISCORD_WEBHOOK }} `
                -Method POST `
                -ContentType "application/json" `
                -Body (@{"content"="Your Virtual Machine`n```````n$hostname`n``````is ready!`nThe SSH public keys are:`n```````n$fingerprints``````"; "username"="${{ github.event.repository.name }}"}|ConvertTo-Json)
          shell: pwsh

        - name: Ping loop
          run: |
            while (1)
            {
                $hostname = "gh-mac"
                if ("${{ inputs.tag }}" -ne "") { $hostname += "-${{ inputs.tag }}" }
                if ("${{ inputs.purpose }}" -ne "") { $hostname += "-${{ inputs.purpose }}" }
                echo "Device has joined Tailscale network as <$hostName>."

                if (Test-Path "/Users/${{ secrets.USER_NAME }}/shutdown.txt" -PathType Leaf)
                {
                  osascript -e 'display notification "Shutdown requested." with title "Shutdown"'
                  sleep 60
                  if (Test-Path "/Users/${{ secrets.USER_NAME }}/shutdown.txt" -PathType Leaf)
                  {
                    break
                  }
                  else
                  {
                    osascript -e 'display notification "Shutdown aborted." with title "Shutdown"'
                  }
                }

                ping ${{ secrets.TAILSCALE_HOMESERVER }} -c 1
                sleep 60
            }
          shell: pwsh

        - name: Disconnect from Tailscale
          if: always()
          run: |
            $HOME/go/bin/tailscale logout
