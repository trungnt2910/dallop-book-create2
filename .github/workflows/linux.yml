name: Ubuntu GNU/Linux
on:
  workflow_dispatch:
    inputs:
        ver:
          description: The version of Ubuntu Linux to run
          required: true
          default: 'latest'
          type: choice
          options:
            - '20.04'
            - '22.04'
            - '24.04'
            - 'latest'
        tag:
          description: The unique tag of the machine
          required: false
          type: string
        purpose:
          description: The purpose of the machine
          required: false
          type: string
defaults:
  run:
    shell: bash

concurrency:
  group: lin-${{ inputs.tag }}-${{ inputs.purpose }}

jobs:
    build:
        runs-on: ubuntu-${{ inputs.ver }}
        steps:
        - uses: actions/checkout@v4

        - name: Generate random password
          run: |
            $randomBytesArray = New-Object byte[] 64
            $rngObject = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
            $rngObject.GetBytes($randomBytesArray)

            $hostname = "gh-lin"
            if ("${{ inputs.tag }}" -ne "") { $hostname += "-${{ inputs.tag }}" }
            if ("${{ inputs.purpose }}" -ne "") { $hostname += "-${{ inputs.purpose }}" }

            $randomString = [System.Convert]::ToBase64String($randomBytesArray)
            Invoke-WebRequest `
                -Uri ${{ secrets.DISCORD_WEBHOOK }} `
                -Method POST `
                -ContentType "application/json" `
                -Body (@{"content"="The password for`n```````n$hostname`n``````is:`n||```````n$randomString`n``````||"; "username"="${{ github.event.repository.name }}"}|ConvertTo-Json)
            $randomString | Out-File -Encoding ASCII password.txt
          shell: pwsh

        - name: Create new account
          run: |
            sudo useradd -m -s /bin/bash ${{ secrets.USER_NAME }}
            echo "${{ secrets.USER_NAME }}:$(cat password.txt)" | sudo chpasswd
            sudo usermod -aG sudo ${{ secrets.USER_NAME }}
            rm -rf password.txt

        - name: Install Tailscale
          run: |
            $codename = (lsb_release --codename --short | Out-String).Trim()
            echo $codename
            echo "https://pkgs.tailscale.com/stable/ubuntu/$codename.noarmor.gpg"
            curl -fsSL "https://pkgs.tailscale.com/stable/ubuntu/$codename.noarmor.gpg" | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
            curl -fsSL "https://pkgs.tailscale.com/stable/ubuntu/$codename.tailscale-keyring.list" | sudo tee /etc/apt/sources.list.d/tailscale.list

            sudo apt-get update
            sudo apt-get install -y tailscale

            $hostname = "gh-lin"
            if ("${{ inputs.tag }}" -ne "") { $hostname += "-${{ inputs.tag }}" }
            if ("${{ inputs.purpose }}" -ne "") { $hostname += "-${{ inputs.purpose }}" }

            sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname $hostname --accept-risk all --ssh --advertise-exit-node
          shell: pwsh

        - name: Install scripts
          run: |
            $userDir = "/home/${{ secrets.USER_NAME }}"
            $shutdown = "
              touch /home/${{ secrets.USER_NAME }}/shutdown.txt
            "

            $abort = "
              rm -rf /home/${{ secrets.USER_NAME }}/shutdown.txt
            "

            [System.IO.File]::WriteAllText("shutdown.sh", $shutdown)
            [System.IO.File]::WriteAllText("shutdown_abort.sh", $abort)

            sudo mv "shutdown.sh" "$userDir/shutdown.sh"
            sudo chmod +x "$userDir/shutdown.sh"
            sudo chown ${{ secrets.USER_NAME }} "$userDir/shutdown.sh"
            sudo mv "shutdown_abort.sh" "$userDir/shutdown_abort.sh"
            sudo chmod +x "$userDir/shutdown_abort.sh"
            sudo chown ${{ secrets.USER_NAME }} "$userDir/shutdown_abort.sh"
          shell: pwsh

        - name: Run initialization
          if: ${{ inputs.purpose }}
          run:
            Invoke-Expression (Invoke-WebRequest "${{ secrets.CDN_BASE }}/lin/${{ inputs.purpose }}/init").Content
          shell: pwsh

        - name: Device has joined Tailscale network as...
          run: |
            $hostname = "gh-lin"
            if ("${{ inputs.tag }}" -ne "") { $hostname += "-${{ inputs.tag }}" }
            if ("${{ inputs.purpose }}" -ne "") { $hostname += "-${{ inputs.purpose }}" }
          shell: pwsh

        - name: Send notification
          run: |
            $hostname = "gh-lin"
            if ("${{ inputs.tag }}" -ne "") { $hostname += "-${{ inputs.tag }}" }
            if ("${{ inputs.purpose }}" -ne "") { $hostname += "-${{ inputs.purpose }}" }

            (ssh-keyscan localhost 2> $null) | Out-File -Encoding ASCII keys.txt
            $fingerprints = ssh-keygen -l -E sha256 -f keys.txt | Out-String
            $fingerprints = $fingerprints.Replace(" localhost ", " $hostname ")
            rm keys.txt

            Invoke-WebRequest `
                -Uri ${{ secrets.DISCORD_WEBHOOK }} `
                -Method POST `
                -ContentType "application/json" `
                -Body (@{"content"="Your Virtual Machine`n```````n$hostname`n``````is ready!`nThe SSH public keys are:`n```````n$fingerprints``````"; "username"="${{ github.event.repository.name }}"}|ConvertTo-Json)
          shell: pwsh

        - name: Ping loop
          run: |
            while (1)
            {
                $hostname = "gh-lin"
                if ("${{ inputs.tag }}" -ne "") { $hostname += "-${{ inputs.tag }}" }
                if ("${{ inputs.purpose }}" -ne "") { $hostname += "-${{ inputs.purpose }}" }
                echo "Device has joined Tailscale network as <$hostName>."

                if (Test-Path "/home/${{ secrets.USER_NAME }}/shutdown.txt" -PathType Leaf)
                {
                  echo "Shutdown requested." | wall
                  sleep 60
                  if (Test-Path "/home/${{ secrets.USER_NAME }}/shutdown.txt" -PathType Leaf)
                  {
                    break
                  }
                  else
                  {
                    echo "Shutdown aborted." | wall
                  }
                }

                ping ${{ secrets.TAILSCALE_HOMESERVER }} -c 1
                sleep 60
            }
          shell: pwsh

        - name: Disconnect from Tailscale
          if: always()
          run: |
            sudo tailscale logout
